version: '3.8'

services:
  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: biothings-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./backend/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./backend/monitoring/prometheus_rules.yml:/etc/prometheus/rules.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
    depends_on:
      - biothings-backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.biothings.local`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # AlertManager - Alert handling
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: biothings-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - ./backend/monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - monitoring
    environment:
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alertmanager.rule=Host(`alerts.biothings.local`)"
      - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:10.0.0
    container_name: biothings-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST:-localhost:587}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
      - GF_SMTP_FROM_ADDRESS=${SMTP_FROM:-biothings@company.com}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./backend/monitoring/grafana:/etc/grafana/provisioning
      - ./backend/monitoring/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.biothings.local`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: biothings-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - monitoring

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: biothings-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    networks:
      - monitoring
    privileged: true

  # Elasticsearch - Log storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: biothings-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Logstash - Log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: biothings-logstash
    restart: unless-stopped
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    volumes:
      - ./backend/monitoring/logstash:/usr/share/logstash/pipeline:ro
      - ./backend/monitoring/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    networks:
      - monitoring
    depends_on:
      - elasticsearch

  # Kibana - Log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: biothings-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - KIBANA_DEFAULTAPPID=discover
    networks:
      - monitoring
    depends_on:
      - elasticsearch
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=Host(`kibana.biothings.local`)"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.46
    container_name: biothings-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=Host(`jaeger.biothings.local`)"
      - "traefik.http.services.jaeger.loadbalancer.server.port=16686"

  # Redis - Caching and temporary storage
  redis:
    image: redis:7.0-alpine
    container_name: biothings-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgreSQL - Persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: biothings-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-biothings}
      - POSTGRES_USER=${POSTGRES_USER:-biothings}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-biothings123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/monitoring/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-biothings}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # BioThings Backend with monitoring
  biothings-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: biothings-backend
    restart: unless-stopped
    ports:
      - "8000:8000"  # Main API
      - "8001:8001"  # Metrics server
    environment:
      - ENVIRONMENT=production
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-biothings}:${POSTGRES_PASSWORD:-biothings123}@postgres:5432/${POSTGRES_DB:-biothings}
      - REDIS_URL=redis://redis:6379
      - PROMETHEUS_ENABLED=true
      - PROMETHEUS_PORT=8001
      - LOG_LEVEL=INFO
      - STRUCTURED_LOGGING=true
    volumes:
      - ./backend:/app:ro
      - biothings_logs:/app/logs
    networks:
      - monitoring
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.biothings-api.rule=Host(`api.biothings.local`)"
      - "traefik.http.services.biothings-api.loadbalancer.server.port=8000"
      - "traefik.http.routers.biothings-metrics.rule=Host(`metrics.biothings.local`)"
      - "traefik.http.services.biothings-metrics.loadbalancer.server.port=8001"

  # Nginx - Reverse proxy
  nginx:
    image: nginx:alpine
    container_name: biothings-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - monitoring
    depends_on:
      - biothings-backend
      - grafana
      - prometheus

  # Traefik - Load balancer and service discovery (alternative to nginx)
  traefik:
    image: traefik:v3.0
    container_name: biothings-traefik
    restart: unless-stopped
    ports:
      - "8080:8080"  # Traefik dashboard
      - "8082:80"    # HTTP
      - "8443:443"   # HTTPS
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.biothings.local`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

networks:
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus_data:
    driver: local
  alertmanager_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  biothings_logs:
    driver: local